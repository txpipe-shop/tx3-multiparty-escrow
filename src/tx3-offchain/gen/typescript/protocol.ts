// This file is auto-generated.

import {
  Client as TRPClient,
  type ClientOptions,
  type TxEnvelope,
} from "tx3-sdk/trp";

export const DEFAULT_TRP_ENDPOINT = "http://localhost:8000/trp";

export const DEFAULT_HEADERS = {};

export const DEFAULT_ENV_ARGS = {};

export type OpenParams = {
  channelid: Uint8Array;
  collateralref: string;
  date: number;
  groupid: Uint8Array;
  initialdeposit: number;
  inputref: string;
  policyid: Uint8Array;
  receiverinput: Uint8Array;
  script: string;
  sender: string;
  signerpubkey: Uint8Array;
  since: number;
  tokenname: Uint8Array;
  until: number;
  validatorref: string;
};

export const OPEN_IR = {
  bytecode:
    "10010d0c76616c696461746f72726566070106736f7572636501010d0673656e6465720500010d08696e7075747265660700000002010d0673637269707405010300060d096368616e6e656c69640405000d0c7369676e65727075626b6579040d0d7265636569766572696e707574040d0767726f75706964040d046461746502010f010f010c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0e696e697469616c6465706f736974020c01000005fc809698000c010d08706f6c6963796964040d09746f6b656e6e616d65040502010d0673656e6465720500010f020f020f020e06736f757263650c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0e696e697469616c6465706f73697402100c01000005fc8096980001010d0573696e636502010d05756e74696c0201010c010d08706f6c6963796964040d09746f6b656e6e616d650405020103000000010000010d0d636f6c6c61746572616c726566070000",
  encoding: "hex",
  version: "v1alpha5",
};

export type CloseParams = {
  channelutxo: string;
  collateralref: string;
  policyid: Uint8Array;
  script: string;
  sender: string;
  since: number;
  tokenname: Uint8Array;
  until: number;
  validatorref: string;
};

export const CLOSE_IR = {
  bytecode:
    "10010d0c76616c696461746f7272656607010674617267657401010d067363726970740500010d0b6368616e6e656c7574786f0700010302000001010d0673656e6465720500010f020f020e06746172676574100c010d08706f6c6963796964040d09746f6b656e6e616d6504050201010d0573696e636502010d05756e74696c0201010c010d08706f6c6963796964040d09746f6b656e6e616d650405010103000000010000010d0d636f6c6c61746572616c7265660701010d0673656e6465720500",
  encoding: "hex",
  version: "v1alpha5",
};

export type UpdateParams = {
  adddeposit: number;
  channelutxo: string;
  collateralref: string;
  extenddate: number;
  inputref: string;
  script: string;
  signer: Uint8Array;
  since: number;
  until: number;
  user: string;
  validatorref: string;
};

export const UPDATE_IR = {
  bytecode:
    "10010d0c76616c696461746f7272656607020763757272656e7401010d067363726970740500010d0b6368616e6e656c7574786f0700010300000006736f7572636501010d04757365720500010d08696e7075747265660700000002010d0673637269707405010300060f040e0763757272656e74000f040e0763757272656e74010f040e0763757272656e74020f040e0763757272656e74030f040e0763757272656e74040d0a657874656e646461746502010f010e0763757272656e740c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0a6164646465706f73697402010d04757365720500010f020f020e06736f757263650c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0a6164646465706f736974021001010d0573696e636502010d05756e74696c020000010000010d0d636f6c6c61746572616c7265660701010d067369676e65720400",
  encoding: "hex",
  version: "v1alpha5",
};

export type ClaimParams = {
  amountinput: number;
  channelutxo: string;
  collateralref: string;
  policyid: Uint8Array;
  receiver: string;
  script: string;
  sender: string;
  signatureinput: Uint8Array;
  since: number;
  stakingaddress: string;
  tokenname: Uint8Array;
  until: number;
  validatorref: string;
};

export const CLAIM_IR = {
  bytecode:
    "10010d0c76616c696461746f7272656607020763757272656e7401010d067363726970740500010d0b6368616e6e656c7574786f0700010301030d0b616d6f756e74696e707574020d0e7369676e6174757265696e7075740406010006736f7572636501010d08726563656976657205010c01000005fc809698000000000002010d0673656e6465720500010f020f020e0763757272656e740c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0b616d6f756e74696e707574020c010d08706f6c6963796964040d09746f6b656e6e616d65040502010d0872656365697665720500010f020f010e06736f757263650c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0b616d6f756e74696e707574021001010d0573696e636502010d05756e74696c0201010c010d08706f6c6963796964040d09746f6b656e6e616d650405010103000001087769746864726177030a63726564656e7469616c0d0e7374616b696e6761646472657373050872656465656d657203000006616d6f756e740500010000010d0d636f6c6c61746572616c7265660701010d0872656365697665720500",
  encoding: "hex",
  version: "v1alpha5",
};

export type ClaimAndContinueParams = {
  amountinput: number;
  channelutxo: string;
  collateralref: string;
  receiver: string;
  script: string;
  signatureinput: Uint8Array;
  since: number;
  stakingaddress: string;
  until: number;
  validatorref: string;
};

export const CLAIM_AND_CONTINUE_IR = {
  bytecode:
    "10010d0c76616c696461746f7272656607020763757272656e7401010d067363726970740500010d0b6368616e6e656c7574786f0700010301030d0b616d6f756e74696e707574020d0e7369676e6174757265696e7075740406000006736f7572636501010d08726563656976657205010c01000005fc809698000000000002010d0673637269707405010300060f040e0763757272656e74000f010f040e0763757272656e740105020f040e0763757272656e74020f040e0763757272656e74030f040e0763757272656e74040f040e0763757272656e7405010f020e0763757272656e740c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0b616d6f756e74696e70757402010d0872656365697665720500010f020f010e06736f757263650c01041c921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce13200704414749580d0b616d6f756e74696e707574021001010d0573696e636502010d05756e74696c020001087769746864726177030872656465656d657203000006616d6f756e7405000a63726564656e7469616c0d0e7374616b696e676164647265737305010000010d0d636f6c6c61746572616c7265660701010d0872656365697665720500",
  encoding: "hex",
  version: "v1alpha5",
};

export class Client {
  readonly #client: TRPClient;

  constructor(options: ClientOptions) {
    this.#client = new TRPClient(options);
  }

  async openTx(args: OpenParams): Promise<TxEnvelope> {
    return await this.#client.resolve({
      tir: OPEN_IR,
      args,
    });
  }
  async closeTx(args: CloseParams): Promise<TxEnvelope> {
    return await this.#client.resolve({
      tir: CLOSE_IR,
      args,
    });
  }
  async updateTx(args: UpdateParams): Promise<TxEnvelope> {
    return await this.#client.resolve({
      tir: UPDATE_IR,
      args,
    });
  }
  async claimTx(args: ClaimParams): Promise<TxEnvelope> {
    return await this.#client.resolve({
      tir: CLAIM_IR,
      args,
    });
  }
  async claimAndContinueTx(args: ClaimAndContinueParams): Promise<TxEnvelope> {
    return await this.#client.resolve({
      tir: CLAIM_AND_CONTINUE_IR,
      args,
    });
  }
}

// Create a default client instance
export const protocol = new Client({
  endpoint: DEFAULT_TRP_ENDPOINT,
  headers: DEFAULT_HEADERS,
  envArgs: DEFAULT_ENV_ARGS,
});
